{"version":3,"sources":["config/global.ts","config/consts.ts","config/http.ts","views/AutoCompleteSearch/AutoCompleteSearchRepository.ts","repositories/Repository.ts","views/AutoCompleteSearch/AutoCompleteSearch.tsx","config/routes.tsx","config/route-consts.ts","helpers/debounce.ts","serviceWorker.ts","index.tsx"],"names":["initGlobalState","process","REACT_APP_BASE_URL","window","location","origin","cartContents","JSON","parse","localStorage","getItem","httpConfig","withCredentials","baseURL","headers","setBaseURL","query","this","http","get","params","then","response","data","result","config","axios","create","url","defaults","AutoCompleteSearch","routes","path","component","f","React","useState","search","setSearch","list","setList","handleUpdateSearch","useCallback","lodashDebounce","handleSearch","event","target","value","useEffect","repository","className","type","onChange","defaultValue","itemLayout","dataSource","renderItem","item","Item","Meta","avatar","src","title","href","description","displayCategory","name","isLocalhost","Boolean","hostname","match","register","navigator","URL","addEventListener","swUrl","fetch","contentType","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","a","async","setGlobal","render","Suspense","fallback","exact","from","to","renderRoutes","document","getElementById"],"mappings":"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","file":"static/js/main.378e5dd1.chunk.js","sourcesContent":["import {STORAGE_CART} from 'config/consts';\nimport {CartContent} from 'models';\n\nexport interface GlobalState {\n  cartContents: CartContent[];\n}\n\nexport const initGlobalState: GlobalState = {\n  cartContents: JSON.parse(localStorage.getItem(STORAGE_CART) || '[]') || [],\n};\n","export const INPUT_DEBOUNCE_TIME: number = 400;\n\nexport const BASE_URL: string = process.env.REACT_APP_BASE_URL\n  || (typeof window !== 'undefined' ? window.location.origin : '');\n\nexport const STORAGE_CART: string = 'products';\n","import {AxiosRequestConfig} from 'axios';\n\nexport const httpConfig: AxiosRequestConfig = {\n  withCredentials: true,\n  baseURL: 'https://listing.stage.tekoapis.net',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n};\n","import { AxiosResponse } from 'axios';\nimport { Repository } from 'repositories/Repository';\n\nexport class AutoCompleteSearchRepository extends Repository {\n    constructor() {\n        super();\n        this.setBaseURL(process.env.NODE_ENV === 'development' ? window.location.origin : 'http://123.31.32.172:5001');\n    }\n\n    public search(query: string): Promise<any> {\n        return this.http.get('/keywords/', {\n            params: {\n                query,\n            },\n        })\n            .then((response: AxiosResponse<any>) => response.data.result);\n    }\n}\n\nexport default new AutoCompleteSearchRepository();\n","import axios, {AxiosInstance, AxiosRequestConfig} from 'axios';\nimport {httpConfig} from 'config/http';\n\nexport class Repository {\n  protected http: AxiosInstance;\n\n  constructor(config?: AxiosRequestConfig) {\n    this.http = axios.create(httpConfig);\n  }\n\n  public setBaseURL(url: string) {\n    this.http.defaults.baseURL = url;\n  }\n}\n","import Avatar from 'antd/lib/avatar';\nimport Input from 'antd/lib/input';\nimport List from 'antd/lib/list';\nimport { debounce } from 'helpers/debounce';\nimport React from 'react';\nimport './AutoCompleteSearch.scss';\nimport repository from './AutoCompleteSearchRepository';\n\nfunction AutoCompleteSearch() {\n  const [search, setSearch] = React.useState<string>('');\n  const [list, setList] = React.useState<any[]>([]);\n\n  const handleUpdateSearch = React.useCallback(debounce(setSearch), []);\n\n  const handleSearch = React.useCallback(\n    (event) => {\n      handleUpdateSearch(event.target.value);\n    },\n    [handleUpdateSearch],\n  );\n\n  React.useEffect(\n    () => {\n      repository.search(search)\n        .then((list) => {\n          setList(list);\n        });\n    },\n    [search],\n  );\n\n  return (\n    <div className=\"auto-complete\">\n      <Input type=\"text\" onChange={handleSearch} defaultValue={search} />\n      <List\n        itemLayout=\"horizontal\"\n        dataSource={list}\n        renderItem={(item) => (\n          <List.Item>\n            <List.Item.Meta\n              avatar={<Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />}\n              title={<a href=\"https://ant.design\">{item.query}</a>}\n              description={`Trong ${item?.displayCategory?.name}`}\n            />\n          </List.Item>\n        )}\n      />\n    </div>\n  );\n}\n\nexport default AutoCompleteSearch;\n","import { HOME_ROUTE } from 'config/route-consts';\nimport { RouteConfig } from 'react-router-config';\nimport AutoCompleteSearch from 'views/AutoCompleteSearch/AutoCompleteSearch';\n\nexport const routes: RouteConfig[] = [\n  {\n    path: HOME_ROUTE,\n    component: AutoCompleteSearch,\n  },\n  // {\n  //   path: HOME_ROUTE,\n  //   component: MobileLayout,\n  //   children: [\n  //     {\n  //       path: PRODUCT_LISTING_ROUTE,\n  //       component: ProductListing,\n  //     },\n  //     {\n  //       path: PRODUCT_DETAIL_ROUTE,\n  //       component: ProductDetails,\n  //     },\n  //   ],\n  // },\n];\n","export const PRODUCT_LISTING_ROUTE: string = '/products';\n\nexport const PRODUCT_DETAIL_ROUTE: string = '/*-pro.:id';\n\nexport const HOME_ROUTE: string = '/';\n","import lodashDebounce from 'lodash/debounce';\n\nexport function debounce(f: (...params: any[]) => any) {\n  return lodashDebounce(f, 400);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n  ),\n);\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import Spin from 'antd/lib/spin';\nimport {GlobalState, initGlobalState} from 'config/global';\nimport {HOME_ROUTE, PRODUCT_LISTING_ROUTE} from 'config/route-consts';\nimport {routes} from 'config/routes';\nimport {render} from 'react-dom';\nimport {renderRoutes} from 'react-router-config';\nimport {BrowserRouter, Redirect, Switch} from 'react-router-dom';\nimport React from 'reactn';\nimport 'scss/main.scss';\nimport {register, unregister} from 'serviceWorker';\n\n(async () => {\n  await React.setGlobal<GlobalState>(initGlobalState);\n  render(\n    <BrowserRouter>\n      <React.Suspense fallback={<Spin/>}>\n        <Switch>\n          <Redirect exact from={HOME_ROUTE} to={PRODUCT_LISTING_ROUTE}/>\n          {renderRoutes(routes)}\n        </Switch>\n      </React.Suspense>\n    </BrowserRouter>,\n    document.getElementById('root'),\n  );\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n  if (process.env.NODE_ENV !== 'production') {\n    unregister();\n  } else {\n    register();\n  }\n})();\n"],"sourceRoot":""}