{"version":3,"sources":["config/global.ts","config/consts.ts","layouts/MobileLayout/MobileLayout.tsx","config/routes.tsx","serviceWorker.ts","index.tsx","config/route-consts.ts"],"names":["initGlobalState","process","REACT_APP_BASE_URL","window","location","origin","cartContents","JSON","parse","localStorage","getItem","MobileLayout","props","route","children","renderRoutes","ProductDetails","React","lazy","ProductListing","routes","path","HOME_ROUTE","component","PRODUCT_LISTING_ROUTE","PRODUCT_DETAIL_ROUTE","isLocalhost","Boolean","hostname","match","register","config","navigator","URL","href","addEventListener","swUrl","fetch","headers","then","response","contentType","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","a","async","setGlobal","render","Suspense","fallback","exact","from","to","document","getElementById"],"mappings":"2MAOaA,GCLmBC,8CAAYC,oBACpB,qBAAXC,QAAyBA,OAAOC,SAASC,ODIV,CAC1CC,aAAcC,KAAKC,MAAMC,aAAaC,QCHJ,aDG6B,OAAS,K,4CEM3DC,MATf,SAAsBC,GAAmC,IAChDC,EAASD,EAATC,MACP,OACE,kBAAC,IAAD,MACQ,OAALA,QAAK,IAALA,OAAA,EAAAA,EAAOC,WAAYC,YAAaF,EAAMC,YCJvCE,EAAiBC,IAAMC,MAAK,kBAAM,8DAClCC,EAAiBF,IAAMC,MAAK,kBAAM,uDAE3BE,EAAwB,CACnC,CACEC,KAAMC,IACNC,UAAWZ,EACXG,SAAU,CACR,CACEO,KAAMG,IACND,UAAWJ,GAEb,CACEE,KAAMI,IACNF,UAAWP,M,gCCPbU,G,OAAcC,QACW,cAA7BxB,OAAOC,SAASwB,UAEa,UAA7BzB,OAAOC,SAASwB,UAEhBzB,OAAOC,SAASwB,SAASC,MACvB,4DASG,SAASC,EAASC,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIC,IACpBhC,GACAE,OAAOC,SAAS8B,MAEJ7B,SAAWF,OAAOC,SAASC,OAIvC,OAGFF,OAAOgC,iBAAiB,QAAQ,WAC9B,IAAMC,EAAK,UAAMnC,GAAN,sBAEPyB,IAgEV,SAAiCU,EAAeL,GAE9CM,MAAMD,EAAO,CACXE,QAAS,CAAC,iBAAkB,YAE3BC,MAAK,SAACC,GAEL,IAAMC,EAAcD,EAASF,QAAQI,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CZ,UAAUa,cAAcC,MAAMP,MAAK,SAACQ,GAClCA,EAAaC,aAAaT,MAAK,WAC7BpC,OAAOC,SAAS6C,eAKpBC,EAAgBd,EAAOL,MAG1BoB,OAAM,WACLC,QAAQC,IACN,oEAvFAC,CAAwBlB,EAAOL,GAI/BC,UAAUa,cAAcC,MAAMP,MAAK,WACjCa,QAAQC,IACN,iHAMJH,EAAgBd,EAAOL,OAM/B,SAASmB,EAAgBd,EAAeL,GACtCC,UAAUa,cACPf,SAASM,GACTG,MAAK,SAACQ,GACLA,EAAaQ,cAAgB,WAC3B,IAAMC,EAAmBT,EAAaU,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACf3B,UAAUa,cAAce,YAI1BR,QAAQC,IACN,iHAKEtB,GAAUA,EAAO8B,UACnB9B,EAAO8B,SAASd,KAMlBK,QAAQC,IAAI,sCAGRtB,GAAUA,EAAO+B,WACnB/B,EAAO+B,UAAUf,WAO5BI,OAAM,SAACY,GACNX,QAAQW,MAAM,4CAA6CA,MC7FhE,EAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACO/C,IAAMiD,UAAuBlE,IADpC,OAECmE,iBACE,kBAAC,IAAD,KACE,kBAAC,IAAMC,SAAP,CAAgBC,SAAU,kBAAC,IAAD,OACxB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUC,OAAK,EAACC,KAAMjD,IAAYkD,GAAIhD,MACrCT,YAAaK,MAIpBqD,SAASC,eAAe,SAQxB5C,IAnBH,sC,+BCXD,sGAAO,IAAMN,EAAgC,YAEhCC,EAA+B,aAE/BH,EAAqB,K","file":"static/js/main.cdf56269.chunk.js","sourcesContent":["import {STORAGE_CART} from 'config/consts';\nimport {CartContent} from 'models';\n\nexport interface GlobalState {\n  cartContents: CartContent[];\n}\n\nexport const initGlobalState: GlobalState = {\n  cartContents: JSON.parse(localStorage.getItem(STORAGE_CART) || '[]') || [],\n};\n","export const INPUT_DEBOUNCE_TIME: number = 400;\n\nexport const BASE_URL: string = process.env.REACT_APP_BASE_URL\n  || (typeof window !== 'undefined' ? window.location.origin : '');\n\nexport const STORAGE_CART: string = 'products';\n","import React from 'react';\nimport {renderRoutes, RouteConfigComponentProps} from 'react-router-config';\nimport {Switch} from 'react-router-dom';\nimport './MobileLayout.scss';\n\nfunction MobileLayout(props: RouteConfigComponentProps) {\n  const {route} = props;\n  return (\n    <Switch>\n      {route?.children && renderRoutes(route.children)}\n    </Switch>\n  );\n}\n\nexport default MobileLayout;\n","import {HOME_ROUTE, PRODUCT_DETAIL_ROUTE, PRODUCT_LISTING_ROUTE} from 'config/route-consts';\nimport MobileLayout from 'layouts/MobileLayout/MobileLayout';\nimport React from 'react';\nimport {RouteConfig} from 'react-router-config';\n\nconst ProductDetails = React.lazy(() => import('views/ProductDetails/ProductDetails'));\nconst ProductListing = React.lazy(() => import('views/ProductListing/ProductListing'));\n\nexport const routes: RouteConfig[] = [\n  {\n    path: HOME_ROUTE,\n    component: MobileLayout,\n    children: [\n      {\n        path: PRODUCT_LISTING_ROUTE,\n        component: ProductListing,\n      },\n      {\n        path: PRODUCT_DETAIL_ROUTE,\n        component: ProductDetails,\n      },\n    ],\n  },\n];\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n  ),\n);\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import Spin from 'antd/lib/spin';\nimport {GlobalState, initGlobalState} from 'config/global';\nimport {HOME_ROUTE, PRODUCT_LISTING_ROUTE} from 'config/route-consts';\nimport {routes} from 'config/routes';\nimport {render} from 'react-dom';\nimport {renderRoutes} from 'react-router-config';\nimport {BrowserRouter, Redirect, Switch} from 'react-router-dom';\nimport React from 'reactn';\nimport 'scss/main.scss';\nimport {register, unregister} from 'serviceWorker';\n\n(async () => {\n  await React.setGlobal<GlobalState>(initGlobalState);\n  render(\n    <BrowserRouter>\n      <React.Suspense fallback={<Spin/>}>\n        <Switch>\n          <Redirect exact from={HOME_ROUTE} to={PRODUCT_LISTING_ROUTE}/>\n          {renderRoutes(routes)}\n        </Switch>\n      </React.Suspense>\n    </BrowserRouter>,\n    document.getElementById('root'),\n  );\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n  if (process.env.NODE_ENV !== 'production') {\n    unregister();\n  } else {\n    register();\n  }\n})();\n","export const PRODUCT_LISTING_ROUTE: string = '/products';\n\nexport const PRODUCT_DETAIL_ROUTE: string = '/*-pro.:id';\n\nexport const HOME_ROUTE: string = '/';\n"],"sourceRoot":""}